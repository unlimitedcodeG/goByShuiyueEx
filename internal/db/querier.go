// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
)

type Querier interface {
	//AddPostTag
	//
	//  INSERT INTO post_tags (post_id, tag_id) VALUES ($1, $2)
	AddPostTag(ctx context.Context, arg AddPostTagParams) error
	//CreatePost
	//
	//  INSERT INTO posts (
	//      title, content, author_id, status
	//  ) VALUES (
	//      $1, $2, $3, $4
	//  )
	//  RETURNING id, title, content, author_id, status, created_at, updated_at
	CreatePost(ctx context.Context, arg CreatePostParams) (Posts, error)
	//CreateTag
	//
	//  INSERT INTO tags (name) VALUES ($1)
	//  RETURNING id, name, created_at
	CreateTag(ctx context.Context, name string) (Tags, error)
	//CreateUser
	//
	//  INSERT INTO users (
	//      username, email, password_hash, full_name
	//  ) VALUES (
	//      $1, $2, $3, $4
	//  )
	//  RETURNING id, username, email, password_hash, full_name, created_at, updated_at
	CreateUser(ctx context.Context, arg CreateUserParams) (Users, error)
	//DeletePost
	//
	//  DELETE FROM posts
	//  WHERE id = $1 AND author_id = $2
	DeletePost(ctx context.Context, arg DeletePostParams) error
	//DeleteTag
	//
	//  DELETE FROM tags
	//  WHERE id = $1
	DeleteTag(ctx context.Context, id int64) error
	//DeleteUser
	//
	//  DELETE FROM users
	//  WHERE id = $1
	DeleteUser(ctx context.Context, id int64) error
	//GetPost
	//
	//  SELECT p.id, p.title, p.content, p.author_id, p.status, p.created_at, p.updated_at,
	//         u.username as author_username
	//  FROM posts p
	//  JOIN users u ON p.author_id = u.id
	//  WHERE p.id = $1 LIMIT 1
	GetPost(ctx context.Context, id int64) (GetPostRow, error)
	//GetPostTags
	//
	//  SELECT t.id, t.name, t.created_at
	//  FROM tags t
	//  JOIN post_tags pt ON t.id = pt.tag_id
	//  WHERE pt.post_id = $1
	//  ORDER BY t.name
	GetPostTags(ctx context.Context, postID int64) ([]Tags, error)
	//GetPostsByTag
	//
	//  SELECT p.id, p.title, p.content, p.author_id, p.status, p.created_at, p.updated_at
	//  FROM posts p
	//  JOIN post_tags pt ON p.id = pt.post_id
	//  WHERE pt.tag_id = $1 AND p.status = 'published'
	//  ORDER BY p.created_at DESC
	GetPostsByTag(ctx context.Context, tagID int64) ([]Posts, error)
	//GetTag
	//
	//  SELECT id, name, created_at
	//  FROM tags
	//  WHERE id = $1 LIMIT 1
	GetTag(ctx context.Context, id int64) (Tags, error)
	//GetTagByName
	//
	//  SELECT id, name, created_at
	//  FROM tags
	//  WHERE name = $1 LIMIT 1
	GetTagByName(ctx context.Context, name string) (Tags, error)
	//GetUser
	//
	//  SELECT id, username, email, password_hash, full_name, created_at, updated_at
	//  FROM users
	//  WHERE id = $1 LIMIT 1
	GetUser(ctx context.Context, id int64) (Users, error)
	//GetUserByEmail
	//
	//  SELECT id, username, email, password_hash, full_name, created_at, updated_at
	//  FROM users
	//  WHERE email = $1 LIMIT 1
	GetUserByEmail(ctx context.Context, email string) (Users, error)
	//GetUserByUsername
	//
	//  SELECT id, username, email, password_hash, full_name, created_at, updated_at
	//  FROM users
	//  WHERE username = $1 LIMIT 1
	GetUserByUsername(ctx context.Context, username string) (Users, error)
	//ListPosts
	//
	//  SELECT p.id, p.title, p.content, p.author_id, p.status, p.created_at, p.updated_at,
	//         u.username as author_username
	//  FROM posts p
	//  JOIN users u ON p.author_id = u.id
	//  WHERE p.status = $1
	//  ORDER BY p.created_at DESC
	//  LIMIT $2 OFFSET $3
	ListPosts(ctx context.Context, arg ListPostsParams) ([]ListPostsRow, error)
	//ListPostsByAuthor
	//
	//  SELECT id, title, content, author_id, status, created_at, updated_at
	//  FROM posts
	//  WHERE author_id = $1
	//  ORDER BY created_at DESC
	ListPostsByAuthor(ctx context.Context, authorID int64) ([]Posts, error)
	//ListTags
	//
	//  SELECT id, name, created_at
	//  FROM tags
	//  ORDER BY name
	ListTags(ctx context.Context) ([]Tags, error)
	//ListUsers
	//
	//  SELECT id, username, email, full_name, created_at, updated_at
	//  FROM users
	//  ORDER BY created_at DESC
	ListUsers(ctx context.Context) ([]ListUsersRow, error)
	//RemovePostTag
	//
	//  DELETE FROM post_tags
	//  WHERE post_id = $1 AND tag_id = $2
	RemovePostTag(ctx context.Context, arg RemovePostTagParams) error
	//UpdatePost
	//
	//  UPDATE posts
	//  SET
	//      title = $3,
	//      content = $4,
	//      status = $5
	//  WHERE id = $1 AND author_id = $2
	//  RETURNING id, title, content, author_id, status, created_at, updated_at
	UpdatePost(ctx context.Context, arg UpdatePostParams) (Posts, error)
	//UpdateUser
	//
	//  UPDATE users
	//  SET
	//      username = $2,
	//      email = $3,
	//      full_name = $4
	//  WHERE id = $1
	//  RETURNING id, username, email, password_hash, full_name, created_at, updated_at
	UpdateUser(ctx context.Context, arg UpdateUserParams) (Users, error)
}

var _ Querier = (*Queries)(nil)
